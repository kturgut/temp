# # Settings for the ClusterClientReceptionist extension
# sample.cluster.client.grpc.receptionist {
#   # Canonical address is the address other clients should connect to.
#   # gRPC transport will expect messages to this address.
#   canonical {
#     port = 50051
#     hostname = 127.0.0.1
#   }
#
#   # Start the receptionist on members tagged with this role.
#   # All members are used if undefined or empty.
#   role = ""
#
#   buffer-size = 1000
#
#   ask-send-timeout = 5 seconds
#
# }
#
#
# # Settings for the ClusterClient
# sample.cluster.client.grpc {
#   buffer-size = 1000
# }
#
# akka.actor {
#   serialization-bindings {
#     "sample.cluster.client.grpc.CborSerializable" = jackson-cbor
#   }
# }
#
# akka.http.server.preview.enable-http2 = on

# akka.grpc.client {
#   "project.WithSpecificConfiguration" {
#     service-discovery {
#       service-name = "my-service"
#     }
#     host = "my-host"
#     port = 42
#     override-authority = "google.fr"
#     deadline = 10m
#     user-agent = "Akka-gRPC"
#   }
# }

// The examples above all use a hard coded host and port for the location of the gRPC service which is the default if you do not configure a service-discovery-mechanism. Alternatively Akka Discovery can be used. This allows a gRPC client to switch between discovering services via DNS, config, Kubernetes and Consul and others by just changing the configuration (see Discovery methods in Akka Management).

akka {
   http {
        server {
                preview {
                    enable-http2 = on
                }
        }
   }
   grpc.client {
     "project.WithSpecificConfiguration" {
       service-discovery {
            mechanism = "config"
            service-name = "from-config"
            # optional for discovery
            protocol = "tcp"
            port-name = "http"
       }
       host = "my-host"
       port = 42
       override-authority = "google.fr"
       deadline = 10m
       user-agent = "Akka-gRPC"
     }
   }

}